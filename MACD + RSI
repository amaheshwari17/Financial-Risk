#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 30 14:44:16 2020

@author: aayush
"""


#PORTFOLIO OF 4 STOCKS FOR SHORT TERM STRATEGY 
#Data Points taken for 40 days

# Import necessary libraries
import yfinance as yf
import datetime as dt
import matplotlib.pyplot as plt
import numpy as np

# Download historical data for 5 years for required stocks
ticker1 = "NFLX"  #NETFLIX
ohlcv1 = yf.download(ticker1,dt.date.today()-dt.timedelta(1825),dt.datetime.today())

ticker2 = "TSLA"  #TESLA
ohlcv2 = yf.download(ticker2,dt.date.today()-dt.timedelta(1825),dt.datetime.today())

ticker3 = "GS"    #GOLDMAN SACHS
ohlcv3 = yf.download(ticker3,dt.date.today()-dt.timedelta(1825),dt.datetime.today())

ticker4 = "AAL"   #AMERICAN AIRLINES GROUP
ohlcv4 = yf.download(ticker4,dt.date.today()-dt.timedelta(1825),dt.datetime.today())

#Define Data Points for time period (in days)
t = 40   #Short term strategy

#Define function for MACD, a,b,c are parameteres for different periods to calculate EMA
#ewm is used with mean () to calculate exponential weighted moving average for MACD and Signal Line
def MACD(DF,a,b,c):
    """typical values a = 12; b =26, c =9"""
    df = DF.copy()   
    df["MA_Fast"]=df["Adj Close"].ewm(span=a,min_periods=a).mean() #Adj Close column taken from ohlcv data, downloaded from yFinance
    df["MA_Slow"]=df["Adj Close"].ewm(span=b,min_periods=b).mean()
    df["MACD"]=df["MA_Fast"]-df["MA_Slow"]  #formula to calculate MACD
    df["Signal"]=df["MACD"].ewm(span=c,min_periods=c).mean() #Calculation of Signal line
    df.dropna(inplace=True) #removing NaN values
    return df   #return entire dataframe

def RSI(DF,n):
    "function to calculate RSI"
    df = DF.copy()
    df['delta']=df['Adj Close'] - df['Adj Close'].shift(1) #day over day in close price
    df['gain']=np.where(df['delta']>=0,df['delta'],0) #np.where function is similar to IF function in excel
    df['loss']=np.where(df['delta']<0,abs(df['delta']),0)
    avg_gain = []  #creating empty list
    avg_loss = []
    gain = df['gain'].tolist()  #convert data series to list
    loss = df['loss'].tolist()
    for i in range(len(df)): #range is length of Dataframe
        if i < n:
            avg_gain.append(np.NaN)  #for first n = 14, it is definitely NaN value
            avg_loss.append(np.NaN)  #hence used append(np.NaN)
        elif i == n:
            avg_gain.append(df['gain'].rolling(n).mean().tolist()[n])  #calculate average first, then convert into list
            avg_loss.append(df['loss'].rolling(n).mean().tolist()[n])  #append them to empty lists created above
        elif i > n:   #when row is greater than 14
            avg_gain.append(((n-1)*avg_gain[i-1] + gain[i])/n)   #formula
            avg_loss.append(((n-1)*avg_loss[i-1] + loss[i])/n)   #formula
    df['avg_gain']=np.array(avg_gain)   #convert list to array in the dataframe
    df['avg_loss']=np.array(avg_loss)   #convert list to array in the dataframe
    df['RS'] = df['avg_gain']/df['avg_loss']   #Relative Strength
    df['RSI'] = 100 - (100/(1+df['RS']))       #Relative Strength Index
    df.dropna(inplace=True)
    return df   #return entire dataframe

# Visualization - plotting MACD/signal along with close price and volume for last 40 data points
df = MACD(ohlcv1, 12, 26, 9)   #calling MACD function for ticker1
df1 = RSI(ohlcv1, 14)   #calling RSI function for ticker1

df2 = MACD(ohlcv2, 12, 26, 9)   #calling MACD function for ticker2
df3 = RSI(ohlcv2, 14)   #calling RSI function for ticker2

df4 = MACD(ohlcv3, 12, 26, 9)   #calling MACD function for ticker3
df5 = RSI(ohlcv3, 14)   #calling RSI function for ticker3

df6 = MACD(ohlcv4, 12, 26, 9)   #calling MACD function for ticker4
df7 = RSI(ohlcv4, 14)   #calling RSI function for ticker4

fig, axs = plt.subplots(4,2, sharex=True, sharey=False, figsize=(30,15))   #creating subplot figure
#ticker1 Stock graphs
axs[0,0].plot(df.iloc[-t:,4])                               #plotting Adj Close price of ticker1
axs[0,0].set(ylabel='Adj Close')
axs[0,0].set_title(ticker1)
axs[1,0].plot(df.iloc[-t:,-2], label='MACD')                #plotting MACD line for ticker1
axs[1,0].plot(df.iloc[-t:,-1], label='Signal')              #plotting Signal line for ticker1
axs[1,0].legend(loc='lower left')
axs[1,0].set(ylabel='MACD/Signal')
axs[2,0].plot(df1.iloc[-t:,-1])                             #plotting RSI line for ticker1
axs[2,0].axhline(70,color='green',ls='--')                    #plotting overbought indicator line
axs[2,0].axhline(30,color='red',ls='--')                      #plotting oversold indicator line
axs[2,0].set(ylabel='RSI')
axs[3,0].bar(df.iloc[-t:,5].index, df.iloc[-t:,5].values) #plotting Volume chart for ticker1
axs[3,0].set(ylabel='Volume')
#ticker2 Stock graphs
axs[0,1].plot(df2.iloc[-t:,4])                              #plotting Adj Close price of ticker2
axs[0,1].set(ylabel='Adj Close')
axs[0,1].set_title(ticker2)
axs[1,1].plot(df2.iloc[-t:,-2], label='MACD')               #plotting MACD line for ticker2
axs[1,1].plot(df2.iloc[-t:,-1], label='Signal')             #plotting Signal line for ticker2
axs[1,1].legend(loc='lower left')
axs[1,1].set(ylabel='MACD/Signal')
axs[2,1].plot(df3.iloc[-t:,-1])                             #plotting RSI line for ticker2
axs[2,1].axhline(70,color='green',ls='--')                    #plotting overbought indicator line
axs[2,1].axhline(30,color='red',ls='--')                      #plotting oversold indicator line
axs[2,1].set(ylabel='RSI')
axs[3,1].bar(df2.iloc[-t:,5].index, df2.iloc[-t:,5].values)#plotting Volume chart for ticker2
axs[3,1].set(ylabel='Volume')

fig.suptitle('Stock Price with MACD+RSI', fontsize=28, fontweight='bold')

fig, axs = plt.subplots(4,2, sharex=True, sharey=False, figsize=(30,15))   #creating subplot figure
#ticker3 Stock graphs
axs[0,0].plot(df4.iloc[-t:,4])                               #plotting Adj Close price of ticker3
axs[0,0].set(ylabel='Adj Close')
axs[0,0].set_title(ticker3)
axs[1,0].plot(df4.iloc[-t:,-2], label='MACD')                #plotting MACD line for ticker3
axs[1,0].plot(df4.iloc[-t:,-1], label='Signal')              #plotting Signal line for ticker3
axs[1,0].legend(loc='lower left')
axs[1,0].set(ylabel='MACD/Signal')
axs[2,0].plot(df5.iloc[-t:,-1])                             #plotting RSI line for ticker3
axs[2,0].axhline(70,color='green',ls='--')                   #plotting overbought indicator line
axs[2,0].axhline(30,color='red',ls='--')                     #plotting oversold indicator line
axs[2,0].set(ylabel='RSI')
axs[3,0].bar(df4.iloc[-t:,5].index, df4.iloc[-t:,5].values) #plotting Volume chart for ticker3
axs[3,0].set(ylabel='Volume')
#ticker4 Stock graphs
axs[0,1].plot(df6.iloc[-t:,4])                               #plotting Adj Close price of ticker4
axs[0,1].set(ylabel='Adj Close')
axs[0,1].set_title(ticker4)
axs[1,1].plot(df6.iloc[-t:,-2], label='MACD')                #plotting MACD line for ticker4
axs[1,1].plot(df6.iloc[-t:,-1], label='Signal')              #plotting Signal line for ticker4
axs[1,1].legend(loc='lower left')
axs[1,1].set(ylabel='MACD/Signal')
axs[2,1].plot(df7.iloc[-t:,-1])                             #plotting RSI line for ticker4
axs[2,1].axhline(70,color='green',ls='--')                   #plotting overbought indicator line
axs[2,1].axhline(30,color='red',ls='--')                     #plotting oversold indicator line
axs[2,1].set(ylabel='RSI')
axs[3,1].bar(df6.iloc[-t:,5].index, df6.iloc[-t:,5].values) #plotting Volume chart for ticker4
axs[3,1].set(ylabel='Volume')


